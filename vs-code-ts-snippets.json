{
  "Controller Template": {
    "prefix": "controller_algonom",
    "body": [
      "import { NextFunction, Response, Request } from \"express\";",
      "",
      "class ${1:Name}Controller {",
      "  async index(req: Request, res: Response, next: NextFunction) {",
      "    try {",
      "      $0",
      "    } catch (e) {",
      "      next(e);",
      "    }",
      "  }",
      "}",
      "",
      "export default new ${1:Name}Controller();"
    ],
    "description": "Express controller template with index method"
  },
  "CronEvent Template": {
    "prefix": "cronevent_algonom",
    "body": [
      "import IBaseCronEvent from \"../../../core/notifiers/cronJobs/BaseCronEvent\";",
      "",
      "export default class ${1:Name}CronEvent extends IBaseCronEvent {",
      "    constructor() {",
      "        super('${2:* * * * *}');",
      "    }",
      "",
      "    start(): void {",
      "        this.build(() => {",
      "            console.log('${1:Name}CronEvent', Math.random())",
      "            $0",
      "        })",
      "    }",
      "}"
    ],
    "description": "Cron event template extending IBaseCronEvent"
  },
  "Dto Template": {
    "prefix": "dto_algonom",
    "body": [
      "export default class ${1:Name}Dto {",
      "  id: string;",
      "  ",
      "  constructor(body: ${1:Name}DtoBody) {",
      "    this.id = body.id;",
      "    $0",
      "  }",
      "}",
      "",
      "export interface ${1:Name}DtoBody {",
      "  id: string;",
      "}"
    ],
    "description": "Data Transfer Object template with interface"
  },
  "Entity Template": {
    "prefix": "entity_algonom",
    "body": [
      "export default class ${1:Name}Entity {",
      "  ${2:id: string;}",
      "",
      "  constructor(body: ${1:Name}EntityBody) {",
      "    ${3:this.id = body.id;}",
      "    $0",
      "  }",
      "}",
      "",
      "export interface ${1:Name}EntityBody {",
      "  ${4:id: string;}",
      "}"
    ],
    "description": "Entity class template with interface body"
  },
  "Sequelize Model Template": {
    "prefix": "seqmodel_algonom",
    "body": [
      "import { DataTypes, Model } from \"sequelize\";",
      "import sequelize from \"../../core/config/postgresConfig\";",
      "",
      "export const ${1:Name}TableName = '${2:your_table_name}'",
      "",
      "class ${1:Name}Model extends Model {}",
      "",
      "const fields = {",
      "  id: {",
      "    type: DataTypes.UUID,",
      "    defaultValue: DataTypes.UUIDV4,",
      "    primaryKey: true,",
      "  },",
      "  $0",
      "};",
      "",
      "const config = {",
      "  sequelize,",
      "  tableName: ${1:Name}TableName,",
      "};",
      "",
      "${1:Name}Model.init(fields, config);",
      "",
      "export default ${1:Name}Model;"
    ],
    "description": "Sequelize model template with UUID primary key"
  },
  "MongoDB Service Template": {
    "prefix": "mongoservice_algonom",
    "body": [
      "export default class ${1:Name}MongoService extends BaseMongoService<Model<I${1:Name}>, ${1:Name}Entity>{",
      "    constructor() {",
      "        super(${1:Name}Schema);",
      "        $0",
      "    }",
      "}"
    ],
    "description": "MongoDB service class extending BaseMongoService"
  },
  "PostgreSQL Service Template": {
    "prefix": "pgservice_algonom",
    "body": [
      "export default class ${1:Name}PostgresService extends PostgresqlService<${1:Name}Model, ${1:Name}Entity> {",
      "  constructor() {",
      "    super(${1:Name}Model);",
      "    $0",
      "  }",
      "}"
    ],
    "description": "PostgreSQL service class extending PostgresqlService"
  },
  "RabbitMQ Event Template": {
    "prefix": "rabbitevent_algonom",
    "body": [
      "import { ConsumeMessage } from 'amqplib';",
      "import IRabbitMQConsumer from '../../core/notifiers/rabbitMq/RabbitMqManager';",
      "import AppError from '../../core/error/AppError';",
      "import httpStatus from 'http-status';",
      "import ErrorResponse from '../../core/response/ErrorResponse';",
      "import { EventKeys } from '../constants/eventConstants';",
      "import { joiValidator } from '../helpers/JoiHelpers';",
      "",
      "export class ${1:Name}Event extends IRabbitMQConsumer {",
      "  constructor() {",
      "    super(EventKeys.${2:SAMPLE_KEY});",
      "  }",
      "",
      "  async onRequest(msg: ConsumeMessage | null) {",
      "    if (!msg) return Promise.reject(new AppError(httpStatus[400], { httpStatus: httpStatus.INTERNAL_SERVER_ERROR }));",
      "    ",
      "    try {",
      "      $0",
      "      this.reply(msg, {});",
      "    } catch (e) {",
      "      if (e instanceof Error) this.reply(msg, new ErrorResponse(e.message));",
      "    } finally {",
      "      this.channel?.ack(msg);",
      "    }",
      "  }",
      "}"
    ],
    "description": "RabbitMQ event consumer class extending IRabbitMQConsumer"
  },
  "Redis Service Template": {
    "prefix": "redisservice_algonom",
    "body": ["export default class ${1:Name}RedisService extends RedisManager {", "  redisKey: string = \"${2:your_redis_key}\";", "  $0", "}"],
    "description": "Redis service class extending RedisManager"
  },
  "Repository Template": {
    "prefix": "repository_algonom",
    "body": ["export default class ${1:Name}Repository extends BaseRepository<${1:Name}PostgresService> {", "  protected dbService;", "  $0", "}"],
    "description": "Repository class extending BaseRepository"
  },
  "Service Template": {
    "prefix": "service_algonom",
    "body": ["export default class ${1:Name}Service extends BaseService {", "    repo: ${2:Some}Repository;", "    $0", "}"],
    "description": "Service class extending BaseService"
  },
  "Socket Event Template": {
    "prefix": "socketevent_algonom",
    "body": [
      "import { Socket, Server } from \"socket.io\";",
      "import { BaseSocketEvent } from \"../../core/socket/BaseSocketEvent\";",
      "import SocketEventKeys from \"../constants/socketEventKeys\";",
      "import { AuthenticatedSocket } from \"../../../types/custom\";",
      "",
      "export interface I${1:Name}EventBody {",
      "  $2",
      "}",
      "",
      "export default class ${1:Name}Event extends BaseSocketEvent {",
      "    constructor() {",
      "        super(SocketEventKeys.${3:EXAMPLE_EVENT});",
      "    }",
      "",
      "    handle(io: Server, socket: AuthenticatedSocket, message: I${1:Name}EventBody): void {",
      "        if (!this.checkAuth(socket)) {",
      "            console.log('authentication required');",
      "            return;",
      "        }",
      "        console.log('Message received:', message);",
      "        console.log('Message received:', socket.userId);",
      "    ",
      "        $0",
      "        // io.emit('chat message', message);",
      "    }",
      "",
      "    handleClosed(io: Server, socket: Socket, ...args: any[]): void {",
      "        console.log('${1:Name} event dropped:', socket.id, args);",
      "    }",
      "}"
    ],
    "description": "Socket.io event class extending BaseSocketEvent"
  },
  "Swagger Documentation Schema Template": {
    "prefix": "swaggerdocschema_algonom",
    "body": [
      "export const ${1:Name}DocHook = {",
      "  ${1:Name}: {",
      "    get: {",
      "      description: \"Event Queue Key: <strong>${2:EVENT_KEY}</strong>  <br /> <br /> Requires a RabbitMQ client request.\",",
      "      summary: \"This event gets ${3:...}\",",
      "      requestBody: {",
      "        description: \"<b>Required values: </b> {${4:sampleValue}}\",",
      "        content: {",
      "          \"application/json\": {",
      "            schema: {",
      "              ref: \"#/components/schemas/${1:Name}\",",
      "            },",
      "          },",
      "        },",
      "      },",
      "      responses: {",
      "        200: {",
      "          description: \"${5:description of the response}\",",
      "          content: {",
      "            \"application/json\": {",
      "              schema: {",
      "                ref: \"#/components/schemas/${1:Name}_RESPONSE\",",
      "              },",
      "            },",
      "          },",
      "        },",
      "      },",
      "    },",
      "  },",
      "};",
      "",
      "export const ${1:Name}DocSchema = {",
      "  ${1:Name}: {",
      "    $6",
      "  },",
      "  ${1:Name}_RESPONSE: {",
      "    success: true,",
      "    body: {",
      "      $0",
      "    },",
      "  },",
      "};"
    ],
    "description": "Documentation schema and hook template for API documentation"
  }
}
